package com.chiaroscuro.chiaroscuro.math

import kotlin.math.sqrt

/**
 * Bivector data type, describes "normal" vectors as planar surfaces. Generated by wedge product.
 */
data class BiVec3(val xy: Float, val xz: Float, val yz: Float) {
    val isNormal: Boolean get() = (xy * xy + xz * xz + yz * yz) approx 1f
    val normal: BiVec3
        get() {
            val a = xy * xy + xz * xz + yz * yz
            return if (a approx 1f) this
            else {
                val len = sqrt(a)
                BiVec3(this.xy / len, this.xz / len, this.yz / len)
            }
        }

    companion object {
        val ZERO: BiVec3 = BiVec3(0f, 0f, 0f)
    }
}

infix fun Vec3.wedge(v: Vec3) = BiVec3(
    xy = x * v.y - y * v.x,
    xz = x * v.z - z * v.x,
    yz = y * v.z - z * v.y
)